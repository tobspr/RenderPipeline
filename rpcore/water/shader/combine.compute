#version 430
layout (local_size_x = 16, local_size_y = 16) in;
 
uniform sampler2D displacementX;
uniform sampler2D displacementY;
uniform sampler2D displacementZ;

uniform int N;
uniform float choppyScale;
uniform float gridLength;

uniform writeonly image2D normalDest;
uniform writeonly image2D displacementDest;


vec3 getDisplacement(ivec2 coord) {
  coord = coord % N;
  return vec3(
    texelFetch(displacementX, coord, 0).x * choppyScale,
    texelFetch(displacementY, coord, 0).x * choppyScale,
    texelFetch(displacementZ, coord, 0).x
  );
}

float getHeight(ivec2 coord) {
    coord = coord % N;
    return texelFetch(displacementZ, coord, 0).x+0.5;
}


void main() {
    ivec2 texelCoords = ivec2(gl_GlobalInvocationID.xy);

    vec3 combinedDispl = getDisplacement(texelCoords);

    vec3 displaceLeft  = getDisplacement(texelCoords + ivec2(-1,0 ));
    vec3 displaceRight = getDisplacement(texelCoords + ivec2( 1,0 ));
    vec3 displaceBack  = getDisplacement(texelCoords + ivec2( 0,-1));
    vec3 displaceFront = getDisplacement(texelCoords + ivec2( 0,1 ));

    vec2 gradient = vec2(
        -(displaceRight.z - displaceLeft.z), 
        -(displaceFront.z - displaceBack.z));

    vec2 Dx = (displaceRight.xy - displaceLeft.xy) * choppyScale * 4.0;
    vec2 Dy = (displaceFront.xy - displaceBack.xy) * choppyScale * 4.0;
    float J = (1.0 + Dx.x) * (1.0 + Dy.y) - Dx.y * Dy.x;
    float fold = max(0.0, 1.0 - J);

    imageStore(normalDest, texelCoords, vec4( gradient, fold, 1));
    imageStore(displacementDest, texelCoords, vec4(combinedDispl, 1));
}